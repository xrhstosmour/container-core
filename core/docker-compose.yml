# TODO: Use Secrets to store the passwords to all containers.
version: "3.9"

services:
  base:
    container_name: "base"
    build:
      context: ..
      dockerfile: "core/base.dockerfile"
      args:
        - "DOCKER_USER_NAME=${DOCKER_USER_NAME?Variable not set}"
        - "DOCKER_USER_UID=${DOCKER_USER_UID?Variable not set}"
    restart: "unless-stopped"
    networks:
      - "public"
      - "local"
    environment:
      - "COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME?Variable not set}"
      - "SHARED_FOLDER_NAME=${SHARED_FOLDER_NAME?Variable not set}"
      - "IS_ON_PREMISE=${IS_ON_PREMISE?Variable not set}"
      - "IS_PRODUCTIVE=${IS_PRODUCTIVE?Variable not set}"
      - "DOCKER_USER_NAME=${DOCKER_USER_NAME?Variable not set}"
      - "DOCKER_USER_UID=${DOCKER_USER_UID?Variable not set}"
      - "DOCKER_TIMEZONE=${DOCKER_TIMEZONE?Variable not set}"
    volumes:
      - "data:/base/data"
      - "keys:/base/data/.keys"
      - "certificates:/base/data/.certificates"
      - "shared_data:/base/data/shared_data"
      - "archived_data:/base/data/archived_data"

  traefik:
    image: "traefik:latest"
    container_name: "traefik"
    restart: "unless-stopped"
    networks:
      - "public"
      - "local"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    expose:
      - "443"
    command:
      # Configure logging.
      - "--log.level=ERROR"
      - "--accesslog=true"
      # Configure the API.
      - "--api.dashboard=true"
      - "--api.insecure=false"
      # Define docker provider.
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # Define entrypoints.
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web_secure.address=:443"
      # Add forwarded headers.
      - "--entryPoints.web.forwardedHeaders.insecure"
      - "--entryPoints.websecure.forwardedHeaders.insecure"
      # Configure TLS/SSL.
      - "--serverstransport.insecureskipverify=true"
      - "--certificatesresolvers.le.acme.email=${TRAEFIK_CERTIFICATE_EMAIL?Variable not set}"
      - "--certificatesresolvers.le.acme.storage=/certificates/acme.json"
      - "--certificatesResolvers.le.acme.tlsChallenge=true"
      - "--global.sendAnonymousUsage=false"
      - "--serverstransport.insecureskipverify=true"
      # Configuration file for more settings for TLS ciphers according to: https://www.ssllabs.com/ssltest/.
      - "--providers.file.filename=./configuration/traefik.toml"
      - "--providers.file.watch=true"
      # Add a custom unique ID on every request.
      - "--tracing.jaeger=true"
      - "--tracing.jaeger.samplingParam=0"
      - "--tracing.jaeger.traceContextHeaderName=X-Request-ID"
    depends_on:
      - "base"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik_data:/certificates"
    labels:
      # Default traefik configuration.
      - "traefik.enable=true"
      - "traefik.docker.network=public"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_HOST?Variable not set}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      # SSL/TLS configuration.
      - "traefik.http.routers.traefik.entrypoints=web_secure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=${TRAEFIK_CERTIFICATE_RESOLVER?Variable not set}"
      # Middleware for global redirection to https with middleware.
      - "traefik.http.routers.http_catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http_catchall.entrypoints=web"
      - "traefik.http.routers.http_catchall.middlewares=redirect_to_https"
      # Set priority for global redirection, in case some local containers does not work with non valid/trusted certificates.
      - "traefik.http.routers.http_catchall.priority=1"
      - "traefik.http.middlewares.redirect_to_https.redirectscheme.scheme=https"
      # Middleware to automatically set security headers according to: https://securityheaders.com/.
      - "traefik.http.middlewares.security_headers.headers.framedeny=true"
      - "traefik.http.middlewares.security_headers.headers.customFrameOptionsValue=sameorigin"
      - "traefik.http.middlewares.security_headers.headers.referrerPolicy=same-origin"
      - "traefik.http.middlewares.security_headers.headers.BrowserXssFilter=true"
      - "traefik.http.middlewares.security_headers.headers.ContentTypeNosniff=true"
      - "traefik.http.middlewares.security_headers.headers.ForceSTSHeader=true"
      - "traefik.http.middlewares.security_headers.headers.SSLRedirect=true"
      - "traefik.http.middlewares.security_headers.headers.STSIncludeSubdomains=true"
      - "traefik.http.middlewares.security_headers.headers.STSPreload=true"
      - "traefik.http.middlewares.security_headers.headers.STSSeconds=315360000"
      # Middleware to redirect to www.
      - "traefik.http.middlewares.redirect_to_www.redirectregex.regex=(https|http)://(?:www.)?(.*)"
      - "traefik.http.middlewares.redirect_to_www.redirectregex.replacement=https://www.$${2}"
      # Middleware to redirect to non-www.
      - "traefik.http.middlewares.redirect_to_non_www.redirectregex.regex=(https|http)://(www\\.(.*))"
      - "traefik.http.middlewares.redirect_to_non_www.redirectregex.replacement=https://$${3}"
      # Middleware for basic authentication to the dashboard.
      - "traefik.http.routers.traefik.middlewares=basic_auth"
      - "traefik.http.middlewares.basic_auth.basicauth.users=${TRAEFIK_USER?Variable not set}:${TRAEFIK_ENCODED_PASSWORD?Variable not set}"

  portainer:
    # Portainer CE is the latest version for now, if you need swarm support, you must install the portainer agent too.
    image: "portainer/portainer-ce:latest"
    container_name: "portainer"
    command:
      [
        "--admin-password",
        "${PORTAINER_ENCODED_PASSWORD?Variable not set}",
        "-H",
        "unix:///var/run/docker.sock",
        "--tlsskipverify"
      ]
    restart: "unless-stopped"
    networks:
      - "public"
      - "local"
    ports:
      - "${PORTAINER_PORT?Variable not set}:9000"
    depends_on:
      - "traefik"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer_data:/data"
    security_opt:
      - "no-new-privileges:true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`${PORTAINER_HOST?Variable not set}`)"
      - "traefik.http.routers.portainer.service=portainer"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.entrypoints=web_secure"
      - "traefik.http.routers.portainer.tls.certresolver=${TRAEFIK_CERTIFICATE_RESOLVER?Variable not set}"
      # The container can only be exposed at port 9000 locally.
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      # Add security headers middleware.
      - "traefik.http.routers.portainer.middlewares=security_headers"

volumes:
  data:
    name: "data"

  certificates:
    name: "certificates"

  keys:
    name: "keys"

  shared_data:
    name: "shared_data"

  archived_data:
    name: "archived_data"

  traefik_data:
    name: "traefik_data"

  portainer_data:
    name: "portainer_data"

networks:

  # ! Public network should be created before composing.
  public:
    # Set as name the public network, you wish your stack to communicate with.
    # External means it would be accesible from outside the stack too.
    name: "public"
    external: true

  local:
    # Set as name the local network, you wish your stack to communicate with.
    name: "local"
    external: false
