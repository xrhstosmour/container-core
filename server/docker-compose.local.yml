version: "3.9"

services:
  base:
    container_name: "base"
    build:
      context: ..
      dockerfile: "server/base.dockerfile"
      args:
        - "DOCKER_USER_NAME=${DOCKER_USER_NAME?Variable not set}"
        - "DOCKER_USER_UID=${DOCKER_USER_UID?Variable not set}"
    restart: "unless-stopped"
    networks:
      - "public"
      - "local"
    env_file:
      - ".env"
    volumes:
      - "base_certificates_data:/base/.certificates"
      - "base_keys_data:/base/.keys"
      - "base_shared_data:/base/shared"

  traefik:
    image: "traefik:latest"
    container_name: "traefik"
    restart: "unless-stopped"
    networks:
      - "public"
      - "local"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web_secure.address=:443"
      # Global redirection to https without middleware.
      # - "--entrypoints.web.http.redirections.entryPoint.to=web_secure"
      # - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "base_certificates_data:/etc/certs:ro"
    labels:
      # Default traefik configuration.
      - "traefik.enable=true"
      - "traefik.docker.network=public"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_HOST?Variable not set}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      # SSL/TLS configuration.
      - "traefik.http.routers.traefik.entrypoints=web_secure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.domains[0].main=localhost"
      - "traefik.http.routers.traefik.tls.domains[0].sans=*.localhost"
      # Global redirection to https with middleware.
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  portainer:
    # Portainer CE is the latest version for now, if you need swarm support, you must install the portainer agent too. 
    image: "portainer/portainer-ce:latest"
    container_name: "portainer"
    command: "-H unix:///var/run/docker.sock"
    restart: "unless-stopped"
    networks:
      - "public"
      - "local"
    ports:
      - "9000:9000"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer_data:/data"
    env_file:
      - ".env"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`${PORTAINER_HOST?Variable not set}`)"
      - "traefik.http.routers.portainer.service=portainer"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.entrypoints=web_secure"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

  postgresql:
    image: "postgres:latest"
    container_name: "postgresql"
    restart: "unless-stopped"
    networks:
      - "local"
    ports:
      - "5432:5432"
    volumes:
      - "postgresql_data:/var/lib/postgresql/data"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DATABASE?Variable not set}
    # ! Add also port and the rest needed condfiguration before removing the .env.
    env_file:
      - ".env"
    labels:
      - "traefik.enable=false"

  pgadmin:
    image: "dpage/pgadmin4:latest"
    container_name: "pgadmin"
    restart: "unless-stopped"
    networks:
      - "public"
      - "local"
    ports:
      - "5050:5050"
    depends_on:
      - "postgresql"
    volumes:
      - "pgadmin_data:/var/lib/pgadmin"
    env_file:
      - ".env"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`${PGADMIN_HOST?Variable not set}`)"
      - "traefik.http.routers.pgadmin.service=pgadmin"
      - "traefik.http.routers.pgadmin.tls=true"
      - "traefik.http.routers.pgadmin.entrypoints=web_secure"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=5050"

  # Help: https://github.com/dani-garcia/vaultwarden/wiki/Proxy-examples
  vaultwarden:
    image: "vaultwarden/server:latest"
    container_name: "vaultwarden"
    restart: "unless-stopped"
    user: ${DOCKER_USER_UID}:${DOCKER_USER_UID?Variable not set}
    networks:
      - "public"
      - "local"
    ports:
      - "${VAULTWARDEN_PORT?Variable not set}:80"
      - "${VAULTWARDEN_WEB_SOCKET_PORT?Variable not set}:3012"
    volumes:
      - "vaultwarden_data:/data"
    environment:
      - "ROCKET_PORT=${VAULTWARDEN_PORT?Variable not set}"
      - "WEBSOCKET_ENABLED=${WEBSOCKET_ENABLED?Variable not set}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vaultwarden.rule=Host(`${VAULTWARDEN_HOST?Variable not set}`)"
      - "traefik.http.routers.vaultwarden.service=vaultwarden"
      - "traefik.http.routers.vaultwarden.tls=true"
      - "traefik.http.routers.vaultwarden.entrypoints=web_secure"
      - "traefik.http.services.vaultwarden.loadbalancer.server.port=${VAULTWARDEN_PORT?Variable not set}"
      - "traefik.http.routers.vaultwarden-websocket.rule=Host(`${VAULTWARDEN_HOST?Variable not set}`) && Path(`/notifications/hub`)"
      - "traefik.http.routers.vaultwarden-websocket.service=vaultwarden-websocket"
      - "traefik.http.services.vaultwarden-websocket.loadbalancer.server.port=${VAULTWARDEN_WEB_SOCKET_PORT?Variable not set}"

  file_browser:
    image: "filebrowser/filebrowser:latest"
    container_name: "file_browser"
    user: ${DOCKER_USER_UID?Variable not set}:${DOCKER_USER_UID?Variable not set}
    restart: "unless-stopped"
    networks:
      - "public"
      - "local"
    ports:
      - "${FILE_BROWSER_PORT?Variable not set}:80"
    volumes:
      - "./configuration/file_browser/database.db:/database.db"
      # - "./configuration/file_browser/settings.json:/filebrowser.json"
      - "base_shared_data:/srv"
    security_opt:
      - "no-new-privileges:true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.file_browser.rule=Host(`${FILE_BROWSER_HOST?Variable not set}`)"
      - "traefik.http.routers.file_browser.service=file_browser"
      - "traefik.http.routers.file_browser.tls=true"
      - "traefik.http.routers.file_browser.entrypoints=web_secure"
      # The container can only be exposed at port 80 both via the proxy.
      - "traefik.http.services.file_browser.loadbalancer.server.port=80"

  homer:
    image: "b4bz/homer:latest"
    container_name: "homer"
    restart: "unless-stopped"
    networks:
      - "public"
      - "local"
    ports:
      - "${HOMER_PORT?Variable not set}:8080"
    environment:
      - "TZ=${DOCKER_TIMEZONE?Variable not set}"
      - "UID=${DOCKER_USER_UID?Variable not set}"
      - "GID=${DOCKER_USER_UID?Variable not set}"
      - "HOMER_TITLE=${HOMER_TITLE?Variable not set}"
      - "HOMER_SUBTITLE=${HOMER_SUBTITLE?Variable not set}"
    volumes:
      - "homer_data:/www/assets"
      - "./configuration/homer/configuration.yml:/www/assets/config.yml"
      - "./configuration/homer/assets/fonts:/www/assets/fonts"
      - "./configuration/homer/assets/logos:/www/assets/logos"
      - "./configuration/homer/assets/wallpapers:/www/assets/wallpapers"
      - "./configuration/homer/assets/custom.css:/www/assets/custom.css"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homer.rule=Host(`${HOMER_HOST?Variable not set}`)"
      - "traefik.http.routers.homer.service=homer"
      - "traefik.http.routers.homer.tls=true"
      - "traefik.http.routers.homer.entrypoints=web_secure"
      # The container can only be exposed at port 8080 locally and both via the proxy.
      - "traefik.http.services.homer.loadbalancer.server.port=8080"

  joplin:
    image: "joplin/server:latest"
    container_name: "joplin"
    restart: "unless-stopped"
    networks:
      - "public"
      - "local"
    ports:
      - "22300:22300"
    depends_on:
      - "postgresql"
    environment:
      - "APP_PORT=22300"
      - "APP_BASE_URL=https://${JOPLIN_HOST?Variable not set}"
      - "DB_CLIENT=pg"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}"
      - "POSTGRES_DATABASE=${POSTGRES_DATABASE?Variable not set}"
      - "POSTGRES_USER=${POSTGRES_USER?Variable not set}"
      - "POSTGRES_PORT=${POSTGRES_PORT?Variable not set}"
      - "POSTGRES_HOST=${POSTGRES_SERVER?Variable not set}"
      - "MAX_TIME_DRIFT=${JOPLIN_MAX_TIME_DRIFT?Variable not set}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.joplin.rule=Host(`${JOPLIN_HOST?Variable not set}`)"
      - "traefik.http.routers.joplin.service=joplin"
      - "traefik.http.routers.joplin.tls=true"
      - "traefik.http.routers.joplin.entrypoints=web_secure"
      # The container can only be exposed at port 22300 both locally and via the proxy.
      - "traefik.http.services.joplin.loadbalancer.server.port=22300"

  vikunja_api:
    image: "vikunja/api:latest"
    container_name: "vikunja_api"
    restart: "unless-stopped"
    networks:
      - "public"
      - "local"
    depends_on:
      - "postgresql"
    environment:
      VIKUNJA_DATABASE_HOST: "${POSTGRES_SERVER?Variable not set}"
      VIKUNJA_DATABASE_PASSWORD: "${POSTGRES_PASSWORD?Variable not set}"
      VIKUNJA_DATABASE_TYPE: "${POSTGRES_DIALECT?Variable not set}"
      VIKUNJA_DATABASE_USER: "${POSTGRES_USER?Variable not set}"
      VIKUNJA_DATABASE_DATABASE: "${POSTGRES_DATABASE?Variable not set}"
    volumes:
      - "vikunja_api_data:/app/vikunja/files"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vikunja_api.rule=Host(`${VIKUNJA_HOST?Variable not set}`) && PathPrefix(`/api/v1`, `/dav/`, `/.well-known/`)"
      - "traefik.http.routers.vikunja_api.service=vikunja_api"
      - "traefik.http.routers.vikunja_api.tls=true"
      - "traefik.http.routers.vikunja_api.entrypoints=web_secure"

  uptime_kuma:
    image: "louislam/uptime-kuma:latest"
    container_name: "uptime_kuma"
    restart: "unless-stopped"
    networks:
      - "public"
      - "local"
    ports:
      - "${UPTIME_KUMA_PORT?Variable not set}:3001"
    volumes:
      - "uptime_kuma_data:/app/data"
    security_opt:
      - "no-new-privileges:true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uptime_kuma.rule=Host(`${UPTIME_KUMA_HOST?Variable not set}`)"
      - "traefik.http.routers.uptime_kuma.service=uptime_kuma"
      - "traefik.http.routers.uptime_kuma.tls=true"
      - "traefik.http.routers.uptime_kuma.entrypoints=web_secure"
      - "traefik.http.services.uptime_kuma.loadbalancer.server.port=3001"

  code_server:
    image: "codercom/code-server:latest"
    container_name: "code_server"
    restart: "unless-stopped"
    networks:
      - "public"
      - "local"
    ports:
      - "${CODE_SERVER_PORT?Variable not set}:8080"
    environment:
      - "PUID=${DOCKER_USER_UID?Variable not set}"
      - "PGID=${DOCKER_USER_UID?Variable not set}"
      - "TZ=${DOCKER_TIMEZONE?Variable not set}"
    # volumes:
    #   - "$HOME/.config:/home/coder/.config"
    #   - "$PWD:/home/coder/project"
    security_opt:
      - "no-new-privileges:true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.code_server.rule=Host(`${CODE_SERVER_HOST?Variable not set}`)"
      - "traefik.http.routers.code_server.service=code_server"
      - "traefik.http.routers.code_server.tls=true"
      - "traefik.http.routers.code_server.entrypoints=web_secure"
      - "traefik.http.services.code_server.loadbalancer.server.port=8080"

volumes:
  base_certificates_data:
    name: "base_certificates_data"
  base_keys_data:
    name: "base_keys_data"
  base_shared_data:
    name: "base_shared_data"
  pgadmin_data:
    name: "pgadmin_data"
  postgresql_data:
    name: "postgresql_data"
  portainer_data:
    name: "portainer_data"
  vaultwarden_data:
    name: "vaultwarden_data"
  homer_data:
    name: "homer_data"
  uptime_kuma_data:
    name: "uptime_kuma_data"
  vikunja_api_data:
    name: "vikunja_api_data"

networks:
  public:
    # Set as name the public network, you wish your stack to communicate with.
    # External means it would be accesible from outside the stack too.
    name: "public"
    external: true
  local:
    # Set as name the local network, you wish your stack to communicate with.
    name: "local"
    external: false
